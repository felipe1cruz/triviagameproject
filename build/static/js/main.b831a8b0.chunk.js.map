{"version":3,"sources":["assets/interrogation.png","assets/check.png","assets/wrong.png","assets/ampulheta.png","services/fetchAPI.js","pages/Login.jsx","redux/actions/index.js","pages/Settings.jsx","components/Header.jsx","services/rankingStorage.js","components/TriviaQuestion.jsx","pages/Game.jsx","pages/Feedback.jsx","pages/Ranking.jsx","App.js","redux/reducers/player.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","KEY","getToken","fetch","then","response","json","localStorage","setItem","token","getTriviaQuestions","getItem","INITIAL_STATE","name","gravatarEmail","isDisabled","Login","state","handleChange","target","value","setState","handleClick","props","setPlayerAction","history","push","this","match","length","className","placeholder","data-testid","type","id","onChange","onClick","disabled","React","Component","connect","dispatch","email","setPlayer","Settings","Header","score","src","MD5","toString","alt","player","getRanking","JSON","parse","setRanking","ranking","rankingList","newRankingList","sort","a","b","stringify","decodeEntity","inputStr","textarea","document","createElement","innerHTML","shuffleArray","array","i","j","Math","floor","random","temp","multiplier","hard","medium","easy","isClicked","isCorrectAnswer","counter","intervalId","isCounting","TriviaQuestion","shuffledQuestions","setShuffledQuestion","quest","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","allAnswers","map","answer","index","datatestid","isCorrect","setScoreAction","stopCounting","difficulty","timer","newCount","clearInterval","next","last","nextQuestion","picture","console","log","setInterval","checkAnswers","category","question","check","wrong","interrogation","ampulheta","key","withRouter","setScore","Trivia","questions","questNumber","getQuestionsToState","response_code","results","removeItem","FeedbackMessage","onClickPlayAgain","onClickRanking","assertions","Ranking","reset","App","exact","path","render","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.b831a8b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/interrogation.5a554197.png\";","module.exports = __webpack_public_path__ + \"static/media/check.d8fbb0ea.png\";","module.exports = __webpack_public_path__ + \"static/media/wrong.b523ea0d.png\";","module.exports = __webpack_public_path__ + \"static/media/ampulheta.ca41588a.png\";","const TOKEN_URL = 'https://opentdb.com/api_token.php?command=request';\nconst TRIVIA_URL = 'https://opentdb.com/api.php?amount=5&token=';\nexport const KEY = 'token';\n\nexport const getToken = () => fetch(TOKEN_URL).then((response) => response.json())\n  .then((json) => localStorage.setItem(KEY, json.token));\n\nexport const getTriviaQuestions = () => {\n  const token = localStorage.getItem(KEY);\n  if (token) {\n    return fetch(TRIVIA_URL + token).then((response) => response.json());\n  }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setPlayer } from '../redux/actions';\nimport '../styles/Login.css';\nimport { getToken } from '../services/fetchAPI';\n\nconst INITIAL_STATE = {\n  name: '',\n  gravatarEmail: '',\n  isDisabled: false,\n};\n\nclass Login extends React.Component {\n  state = {\n    ...INITIAL_STATE,\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({ [name]: value });\n  }\n\n  handleClick = async () => {\n    const { name, gravatarEmail } = this.state;\n    const { setPlayerAction, history } = this.props;\n\n    setPlayerAction(name, gravatarEmail);\n    await getToken();\n    history.push('/trivia');\n  }\n\n  render() {\n    const { history } = this.props;\n    const { gravatarEmail, name } = this.state;\n    const regExp = /\\w+@[a-z]+\\.com/g;\n    let { isDisabled } = this.state;\n    const magicNumber = 3;\n\n    if (gravatarEmail.match(regExp) && name.length >= magicNumber) {\n      isDisabled = true;\n    }\n\n    return (\n      <section className=\"login__page\">\n        <form>\n          <span className=\"text-center\">login</span>\n          <div className=\"input-container\">\n            <input\n              placeholder=\"nome\"\n              data-testid=\"input-player-name\"\n              type=\"text\"\n              name=\"name\"\n              id=\"name\"\n              onChange={ this.handleChange }\n              value={ name }\n            />\n          </div>\n          <div className=\"input-container\">\n            <input\n              placeholder=\"e-mail\"\n              data-testid=\"input-gravatar-email\"\n              type=\"email\"\n              name=\"gravatarEmail\"\n              id=\"gravatarEmail\"\n              onChange={ this.handleChange }\n              value={ gravatarEmail }\n            />\n          </div>\n          <button\n            type=\"button\"\n            data-testid=\"btn-play\"\n            className={ !isDisabled ? 'btn mt-50 disabled' : 'btn mt-50' }\n            onClick={ this.handleClick }\n            disabled={ !isDisabled }\n          >\n            Play!\n          </button>\n          <button\n            type=\"button\"\n            data-testid=\"btn-settings\"\n            className=\"btn mt-50\"\n            onClick={ () => history.push('/settings') }\n          >\n            Settings\n          </button>\n        </form>\n      </section>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setPlayerAction: (name, email) => dispatch(setPlayer(name, email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  setPlayerAction: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n","export const SET_PLAYER = 'SET_PLAYER';\nexport const SET_SCORE = 'SET_SCORE';\nexport const RESET = 'RESET';\n\nexport const setPlayer = (name, email) => ({\n  type: SET_PLAYER,\n  name,\n  email,\n});\n\nexport const setScore = (score) => ({\n  type: SET_SCORE,\n  score,\n});\n\nexport const setReset = () => ({\n  type: RESET,\n});\n","import React from 'react';\n\nexport default class Settings extends React.Component {\n  render() {\n    return (\n      <h1 data-testid=\"settings-title\">Settings</h1>\n    );\n  }\n}\n","import { MD5 } from 'crypto-js';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport '../styles/Header.css';\n\nclass Header extends React.Component {\n  render() {\n    const { name, gravatarEmail, score } = this.props;\n    return (\n      <header>\n        <span data-testid=\"header-player-name\">{name}</span>\n        <img\n          data-testid=\"header-profile-picture\"\n          className=\"gravatar-icon\"\n          src={ `https://www.gravatar.com/avatar/${MD5(gravatarEmail).toString()}` }\n          alt=\"gravatar\"\n        />\n        <span data-testid=\"header-score\">{score}</span>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = ({ player }) => ({\n  name: player.name,\n  gravatarEmail: player.gravatarEmail,\n  score: player.score,\n});\n\nexport default connect(mapStateToProps, null)(Header);\n\nHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n","const KEY = 'ranking';\n\nexport const getRanking = () => JSON.parse(localStorage.getItem(KEY));\n\nexport const setRanking = (ranking) => {\n  const rankingList = getRanking();\n  if (rankingList) {\n    const newRankingList = [...rankingList, ranking].sort((a, b) => b.score - a.score);\n    localStorage.setItem(KEY, JSON.stringify(newRankingList));\n  } else {\n    localStorage.setItem(KEY, JSON.stringify([ranking]));\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport interrogation from '../assets/interrogation.png';\nimport check from '../assets/check.png';\nimport wrong from '../assets/wrong.png';\nimport ampulheta from '../assets/ampulheta.png';\nimport '../styles/TriviaQuestion.css';\nimport { setScore } from '../redux/actions';\nimport { setRanking } from '../services/rankingStorage';\n\nfunction decodeEntity(inputStr) {\n  const textarea = document.createElement('textarea');\n  textarea.innerHTML = inputStr;\n  return textarea.value;\n}\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i -= 1) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n};\n\nconst multiplier = {\n  hard: 3,\n  medium: 2,\n  easy: 1,\n};\n\nconst INITIAL_STATE = {\n  isClicked: false,\n  isCorrectAnswer: false,\n  counter: 30,\n  intervalId: 0,\n  isCounting: true,\n};\n\nclass TriviaQuestion extends React.Component {\n  state = {\n    ...INITIAL_STATE,\n    shuffledQuestions: [],\n  }\n\n  componentDidMount() {\n    this.setShuffledQuestion();\n    const intervalId = setInterval(this.timer, +'1000');\n    // store intervalId in the state so it can be accessed later:\n    this.setState({ intervalId });\n  }\n\n  componentWillUnmount() {\n    const { intervalId } = this.state;\n    // use intervalId from the state to clear the interval\n    clearInterval(intervalId);\n  }\n\n  setShuffledQuestion = () => {\n    const { quest: {\n      correct_answer: correctAnswer,\n      incorrect_answers: incorrectAnswers,\n    } } = this.props;\n\n    const allAnswers = [...incorrectAnswers, correctAnswer].map((answer, index) => ({\n      answer,\n      datatestid: answer === correctAnswer ? 'correct-answer' : `wrong-answer-${index}`,\n      isCorrect: answer === correctAnswer,\n    }));\n    shuffleArray(allAnswers);\n\n    this.setState({ shuffledQuestions: allAnswers });\n  }\n\n  handleClick = (isCorrect) => {\n    const { setScoreAction } = this.props;\n\n    this.stopCounting();\n    this.setState({ isClicked: true });\n    if (isCorrect) {\n      this.setState({ isCorrectAnswer: true });\n      setScoreAction(this.score());\n    } else {\n      this.setState({ isCorrectAnswer: false });\n    }\n  }\n\n  score = () => {\n    const { quest: { difficulty } } = this.props;\n    const { counter } = this.state;\n\n    return +'10' + (counter * multiplier[difficulty]);\n  }\n\n  timer = () => {\n    const { counter, intervalId } = this.state;\n    // setState method is used to update the state\n    const newCount = counter - 1;\n    if (newCount > +'0') {\n      this.setState({ counter: newCount });\n    } else {\n      clearInterval(intervalId);\n      this.setState({ isCounting: false, isClicked: true });\n    }\n  }\n\n  next = () => {\n    const { last, history, nextQuestion, name, score, picture } = this.props;\n    console.log(last);\n    nextQuestion();\n    if (last) {\n      history.push('/feedback');\n      setRanking({ name, score, picture });\n    } else {\n      const intervalId = setInterval(this.timer, +'1000');\n      this.setState({ ...INITIAL_STATE, intervalId });\n      this.setShuffledQuestion();\n    }\n  }\n\n  stopCounting = () => {\n    const { intervalId } = this.state;\n    clearInterval(intervalId);\n    this.setState({ isCounting: false });\n  }\n\n  checkAnswers = (isCorrect) => (isCorrect\n    ? 'm5 btn green disabled' : 'm5 btn red disabled');\n\n  render() {\n    const { isClicked, isCorrectAnswer,\n      shuffledQuestions, counter, isCounting } = this.state;\n    const { quest: {\n      category,\n      question,\n    } } = this.props;\n\n    return (\n      <section className=\"question-container\">\n        <h4 data-testid=\"question-category\">{category}</h4>\n        { !isClicked ? (\n          <img src={ interrogation } alt=\"responda\" className=\"img\" />\n        ) : (\n          <img\n            src={ isCorrectAnswer ? check : wrong }\n            alt={ isCorrectAnswer ? 'check' : 'wrong' }\n            className=\"img\"\n          />)}\n        <div className=\"counter-container\">\n          {isCounting ? (\n            <>\n              <img\n                src={ ampulheta }\n                alt=\"ampulheta\"\n                className=\"img rotate-center\"\n              />\n              <span>{counter}</span>\n            </>\n          ) : (\n            <button\n              type=\"button\"\n              data-testid=\"btn-next\"\n              className=\"btn\"\n              onClick={ this.next }\n            >\n              NEXT\n            </button>\n          )}\n        </div>\n        <p data-testid=\"question-text\">\n          {decodeEntity(question)}\n        </p>\n        <div data-testid=\"answer-options\">\n          {shuffledQuestions.map(({ answer, datatestid, isCorrect }) => (\n            <button\n              key={ datatestid }\n              data-testid={ datatestid }\n              type=\"button\"\n              onClick={ () => this.handleClick(isCorrect) }\n              disabled={ isClicked }\n              className={ isClicked ? this.checkAnswers(isCorrect) : 'm5 btn' }\n            >\n              {decodeEntity(answer)}\n            </button>\n          ))}\n        </div>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = ({ player }) => ({\n  name: player.name,\n  score: player.score,\n  picture: player.gravatarEmail,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setScoreAction: (score) => dispatch(setScore(score)),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(TriviaQuestion));\n\nTriviaQuestion.propTypes = {\n  quest: PropTypes.shape({\n    category: PropTypes.string,\n    type: PropTypes.string,\n    difficulty: PropTypes.string,\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string),\n  }).isRequired,\n  setScoreAction: PropTypes.func.isRequired,\n  nextQuestion: PropTypes.func.isRequired,\n  last: PropTypes.bool.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  picture: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport { getTriviaQuestions, KEY } from '../services/fetchAPI';\nimport TriviaQuestion from '../components/TriviaQuestion';\n\nexport default class Trivia extends React.Component {\n  state = {\n    questions: [],\n    questNumber: 0,\n  }\n\n  componentDidMount() {\n    this.getQuestionsToState();\n  }\n\n  getQuestionsToState = async () => {\n    const { history } = this.props;\n    const response = await getTriviaQuestions();\n\n    if (response.response_code === 0) {\n      this.setState({ questions: response.results });\n    } else {\n      localStorage.removeItem(KEY);\n      history.push('/');\n    }\n  }\n\n  nextQuestion = () => {\n    this.setState(({ questNumber }) => ({ questNumber: questNumber + 1 }));\n  }\n\n  render() {\n    const { questions, questNumber } = this.state;\n\n    return (\n      <>\n        <Header />\n        {questions.length && <TriviaQuestion\n          quest={ questions[questNumber] }\n          last={ (questions.length - 1) === questNumber }\n          nextQuestion={ this.nextQuestion }\n          questNumber={ questNumber }\n        />}\n      </>\n    );\n  }\n}\n\nTrivia.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport '../styles/Header.css';\n\nclass FeedbackMessage extends React.Component {\n  onClickPlayAgain = () => {\n    const { history } = this.props;\n    history.push('/');\n  };\n\n  onClickRanking = () => {\n    const { history } = this.props;\n    history.push('/ranking');\n  };\n\n  render() {\n    const { assertions, score } = this.props;\n\n    return (\n      <>\n        <Header />\n        <h1 data-testid=\"feedback-text\">\n          {assertions >= +'3' ? 'Well Done!' : 'Could be better...'}\n        </h1>\n        <h2>Total de pontos:</h2>\n        <p data-testid=\"feedback-total-score\">{score}</p>\n        <h2>Total de acertos:</h2>\n        <p data-testid=\"feedback-total-question\">{assertions}</p>\n        <button\n          type=\"button\"\n          onClick={ this.onClickPlayAgain }\n          data-testid=\"btn-play-again\"\n        >\n          Play Again\n\n        </button>\n        <button\n          type=\"button\"\n          onClick={ this.onClickRanking }\n          data-testid=\"btn-ranking\"\n        >\n          Ranking\n        </button>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ player }) => ({\n  assertions: player.assertions,\n  score: player.score,\n});\n\nexport default connect(mapStateToProps, null)(FeedbackMessage);\n\nFeedbackMessage.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { MD5 } from 'crypto-js';\nimport { connect } from 'react-redux';\nimport { getRanking } from '../services/rankingStorage';\nimport { setReset } from '../redux/actions';\n\nclass Ranking extends React.Component {\n  state = {\n    rankingList: [],\n  }\n\n  componentDidMount() {\n    this.setState({ rankingList: getRanking() });\n  }\n\n  onClick = () => {\n    const { history, reset } = this.props;\n    reset();\n    history.push('/');\n  };\n\n  render() {\n    const { rankingList } = this.state;\n    return (\n      <>\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        <button\n          type=\"button\"\n          onClick={ this.onClick }\n          data-testid=\"btn-go-home\"\n        >\n          Voltar ao Início\n        </button>\n        {rankingList && rankingList.map((player, index) => (\n          <div key={ index }>\n            <p data-testid={ `player-name-${index}` }>{player.name}</p>\n            <p data-testid={ `player-score-${index}` }>{player.score}</p>\n            <img src={ `https://www.gravatar.com/avatar/${MD5(player.picture).toString()}` } alt={ player.name } />\n          </div>\n        ))}\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  reset: () => dispatch(setReset()),\n});\n\nexport default connect(null, mapDispatchToProps)(Ranking);\n\nRanking.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  reset: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport Trivia from './pages/Game';\nimport FeedBack from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/triviagameproject\" render={ (props) => <Login { ...props } /> } />\n      <Route exact path=\"/trivia\" render={ (props) => <Trivia { ...props } /> } />\n      <Route exact path=\"/settings\" render={ (props) => <Settings { ...props } /> } />\n      <Route exact path=\"/feedback\" render={ (props) => <FeedBack { ...props } /> } />\n      <Route exact path=\"/ranking\" render={ (props) => <Ranking { ...props } /> } />\n    </Switch>\n  );\n}\n","import { SET_PLAYER, SET_SCORE, RESET } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '', // nome-da-pessoa\n  assertions: 0, // número-de-acertos\n  score: 0, // pontuação\n  gravatarEmail: '',\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_PLAYER:\n    return {\n      ...state,\n      name: action.name,\n      gravatarEmail: action.email,\n    };\n\n  case SET_SCORE:\n    return {\n      ...state,\n      score: state.score + action.score,\n      assertions: state.assertions + 1,\n    };\n\n  case RESET:\n    return {\n      ...INITIAL_STATE,\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import { combineReducers } from 'redux';\nimport player from './player';\n\nconst rootReducer = combineReducers({\n  player,\n});\n\nexport default rootReducer;\n","import { legacy_createStore as createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}